<?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mapper.BackOfficeMapper">

	<resultMap id="goodsDetailMap" type="com.vo.Goods">
	  <id property="id" column="id" />
	  <result property="no" column="no" />
	  <result property="nm" column="nm" />
	  <result property="price" column="price" />
	  <result property="dprice" column="dprice" />
	  <result property="fabric" column="fabric" />
	  <result property="info" column="info" />
	  <result property="descliption" column="descliption" />
	  <collection property="img" ofType="com.vo.Img">
	    <result property="imgNm" column="imgNm" />
	    <result property="path" column="path" />
	  </collection>
	  <collection property="option" ofType="com.vo.Option">
	    <result property="color" column="optColor" />
	    <result property="sz" column="optSz" />
	    <result property="inventory" column="optInventory" />
	  </collection>
	</resultMap>


	<!-- 페이징 처리를 위해 각 테이블의 데이터 총 갯수를 조회하는 쿼리 -->
	<select id="selectBoInquiryAllCount"  resultType="int" >
		SELECT 
			COUNT(id) 
		FROM 
			inquiry 
	</select>
	
	<select id="selectBoMemberAllCount"  resultType="int" >
		SELECT 
			COUNT(id) 
		FROM 
			member 
	</select>

	<select id="selectBoEventAllCount"  resultType="int" >
		SELECT 
			COUNT(id) 
		FROM 
			event 
	</select>

	<select id="selectBoGoodsAllCount"  resultType="int" >
		SELECT 
			COUNT(id) 
		FROM 
			goods 
	</select>

	
	<!-- 각 테이블의 데이터 리스트를 조회하는 쿼리 -->
	<select id="selectBoInquiryList" parameterType="com.dao.InquiryDao" resultType="com.vo.Inquiry" >
		SELECT
			id, 
			title, 
			context, 
			regDt, 
			regId, 
			updateDt, 
			updateId, 
			imgGroupId
		FROM
			inquiry	
		ORDER BY 
			id DESC
		LIMIT #{amount} OFFSET #{offset}
	</select>
	
	<!-- boInquiryDetail 을 조회하는 쿼리 -->
	<select id="selectBoInquiryDetail" parameterType="com.dao.InquiryDao" resultType="com.vo.Inquiry" >
		SELECT
			iq.id AS id,
			iq.title AS title,
			iq.context AS context,
			i.`path` AS imgPath,
			asw.content AS acontext
		FROM
			inquiry iq
			JOIN img i ON
			iq.imgGroupId = i.imgGroupId
			LEFT JOIN answer asw ON
			iq.id = asw.qid
		WHERE iq.id = #{id}
	</select>
	
	<!-- 회원 테이블의 데이터 리스트를 조회하는 쿼리 -->	
	<select id="selectBoMemberList" parameterType="com.dao.MemberDao"  resultType="com.vo.Member">
		SELECT 
			id,
			nm, 
			userId, 
			birth, 
			pno, 
			addr1, 
			addr2, 
			regDt, 
			regId, 
			updateDt, 
			updateId 
		FROM 
			member
		ORDER BY 
			id DESC
		LIMIT #{amount} OFFSET #{offset}	
	</select>
	
	<!-- 이벤트 테이블의 데이터 리스트를 조회하는 쿼리 -->	
	<select id="selectBoEventList" parameterType="com.dao.EventDao"  resultType="com.vo.Event">
		SELECT 
			id,
			listImg, 
			detailImg, 
			title, 
			contents, 
			regDt, 
			regId, 
			updateDt, 
			updateId, 
			useYn
		FROM 
			event 
		ORDER BY 
			id DESC
		LIMIT #{amount} OFFSET #{offset}	
	</select>

	<!-- 상품 테이블의 데이터 리스트를 조회하는 쿼리 -->
	<select id="selectBoGoodsList" parameterType="com.dao.GoodsDao"  resultMap="goodsDetailMap">
		 SELECT 
		 	g.id, 
		 	g.cateId, 
		 	g.no, 
		 	g.nm, 
		 	g.price, 
		 	g.dprice, 
		 	g.wareHousing, 
		 	g.goodsState, 
		 	g.info, 
		 	g.descliption, 
		 	g.fabric, 
		 	g.listImg, 
		 	g.detailImg, 
		 	g.regDt, 
		 	g.regId, 
		 	g.updateDt, 
		 	g.updateId, 
		 	g.useYn,
		 	o.color as optColor,
		 	o.sz as optSz,
		 	o.inventory as optInventory,
			i.nm as imgNm,
			i.`path`
		FROM 
			goods g 
		JOIN opt o ON
			g.id = o.goodsId 
		JOIN imgGroup ig ON
			g.detailImg = ig.id
			OR 
			g.listImg = ig.id
		JOIN img i ON
			ig.id = i.imgGroupId
		WHERE
			1 = 1
		 <if test='id =! null'>
		 	AND g.id = #{id}
		 </if>	
		 <if test='searchNm =! null'>
			<if test='searchType == "c"'>
				AND g.no = #{searchNm}
		 	</if>
		 	<if test='searchType == "n"'>
				AND g.nm LIKE '%' + #{searchNm} + '%'
		 	</if>
		 </if>	
		ORDER BY 
			id DESC
		LIMIT #{amount} OFFSET #{offset}	
	</select>

	<!-- 상품 수정을 위해 상품, 이미지들, 옵션을 조회하는 쿼리 -->
	<select id="selectBoGoods" parameterType="int"  resultMap="goodsDetailMap">
		SELECT 
	 	g.id, 
	 	g.cateId, 
	 	g.no, 
	 	g.nm, 
	 	g.price, 
	 	g.dprice, 
	 	g.wareHousing, 
	 	g.goodsState, 
	 	g.info, 
	 	g.descliption, 
	 	g.fabric, 
	 	g.listImg, 
	 	g.detailImg, 
	 	g.regDt, 
	 	g.regId, 
	 	g.updateDt, 
	 	g.updateId, 
	 	g.useYn,
	 	o.color as optColor,
	 	o.sz as optSz,
	 	o.inventory as optInventory,
		i.nm as imgNm,
		i.`path`
	FROM 
		goods g 
	JOIN opt o ON
		g.id = o.goodsId 
	JOIN imgGroup ig ON
		g.detailImg = ig.id
		OR 
		g.listImg = ig.id
	JOIN img i ON
		ig.id = i.imgGroupId
	WHERE g.id = #{value}	
	</select>
	
	
	
	<!-- insert --><!-- insert --><!-- insert --><!-- insert --><!-- insert --><!-- insert --><!-- insert --><!-- insert --><!-- insert --><!-- insert -->
	
	<insert id="insertBoAnswer" parameterType="com.dao.AnswerDao">
		INSERT INTO answer
			(qid, content, regDt, regId, updateDt, updateId, useYn)
		VALUES(#{qid}, #{context}, now(), 99999, now(), 99999, 'Y');
	</insert>
	
	
	<select id="selectBoCouponNumbering" resultType="Integer">
		SELECT id FROM coupon ORDER BY id DESC LIMIT 1
	</select>
	<insert id="insertBoCoupon" parameterType="com.dao.CouponDao">
		INSERT INTO coupon
			(id, codeNum, nm, couponType, couponSize, limitPrice, maxPrice, issuedCount, useDate, regDt, regId, updateDt, updateId, useYn)
		VALUES(#{id}, #{codeNum}, #{nm}, #{couponType}, #{couponSize}, #{limitPrice}, #{maxPrice}, #{issuedCount}, #{useDate}, now(), 99999, now(), 99999, 'Y');
	</insert>
	
	<select id="selectBoCouponLogNumbering" resultType="Integer">
		SELECT id FROM couponLog ORDER BY id DESC LIMIT 1
	</select>
	<insert id="insertBoCouponLog" parameterType="com.dao.CouponDao">
		INSERT INTO YULSHOP.couponLog
			(id, cid, mid, reason, regDt, regId, updateDt, updateId)
		VALUES(#{id}, #{cid}, #{mid}, #{reason}, now(), #{regId}, now(), #{updateId});
	</insert>
	
	<!-- insert --><!-- insert --><!-- insert --><!-- insert --><!-- insert --><!-- insert --><!-- insert --><!-- insert --><!-- insert --><!-- insert -->
	
</mapper>


